#!/usr/bin/env node

var program = require('commander'),
    init = require('./lib/init'),
    login = require('./lib/login'),
    exec = require('child_process').exec;

program.version('0.0.1')
  .option('-j, --json', 'Output in JSON format')
  .option('-s, --sync', 'Sync with your ppl address book')
  .parse(process.argv);

init(program, function(config) {
  var func = program.sync ? syncAll : print;

  var client = login(config);
  client.contacts('get', wrapped(func));
});

function wrapped(callback) {
  return function(err) {
    return err
      ? console.error(err)
      : callback.apply(null, Array.prototype.slice.call(arguments, 1));
  };
}

function syncAll(resp, data) {
  if(!data || !data.contacts || !Object.keys(data.contacts).length) {
    process.exit();
  }

  var key = Object.keys(data.contacts)[0]
  var contact = data.contacts[key];

  sync(contact, function() {
    console.log('Synced: ' + contact.name);
    delete data.contacts[key];

    syncAll(resp, data);
  });
}

function sync(contact, callback) {
  var key = contact.name.replace(' ', '').toLowerCase();
  
  ppl('name', key, function(stdout) {
    var commands = {
      'name': [ quoted(contact.name) ],
      'phone': [ contact.phoneNumber.replace('+', '') ]
    };

    if(contact.emails && contact.emails.length) {
      commands.email = [ quoted(contact.emails[0]) ];
    }

    (function roll() {
      if(Object.keys(commands).length == 0) {
        callback(); return;
      }

      var cmd = Object.keys(commands)[0];
      var arr = commands[cmd];
      arr.unshift(key);
      arr.unshift(cmd);
      arr.push(function() {
        delete commands[cmd];

        roll();
      }, process.exit.bind(process));

      ppl.apply(null, arr);
    })();
  }, function() {
    ppl('add', key, quoted(contact.name), sync.bind(null, contact, callback), process.exit.bind(process));
  });
}

function quoted(str) {
  return '\"' + str + '\"';
}

function ppl(command) {
  var args = Array.prototype.slice.call(arguments, 1),
      callback = args[args.length - 2],
      errback = args[args.length - 1],
      pplArgs = args.slice(0, -2),
      cmd = 'ppl ' + command +  ' ' + pplArgs.join(' ');

  exec(cmd, function(err, stdout, stderr) {
    return err ? errback() : callback(stdout);
  });
}

function print(resp, data) {
  if(!data || !data.contacts) {
    return;
  }


  if(program.json) {
    console.log(JSON.stringify(data.contacts));
    return;
  }

  var contacts = Object.keys(data.contacts).map(function(key) {
      return data.contacts[key];
    })
    .sort(function(a, b) {
      var c = a.name[0] || 'z',
          d = b.name[0] || 'z';

      return c > d;
    });

  contacts.forEach(function(c) {
    var name = c.name,
        phone = c.phoneNumber.replace('+', '');

    console.log(name + '\t' + phone);

  });
}
